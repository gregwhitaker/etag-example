import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

plugins {
    id "java"
    id "com.gradle.build-scan" version "3.0"
    id "net.saliman.properties" version "1.4.6"
    id "com.adarshr.test-logger" version "2.0.0"
    id "org.springframework.boot" version "2.2.2.RELEASE"
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "com.bmuschko.docker-remote-api" version "3.4.4"
    id "org.flywaydb.flyway" version "6.0.8"
}

buildScan {
    termsOfServiceUrl = "https://gradle.com/terms-of-service"
    termsOfServiceAgree = "yes"
    publishOnFailure()
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework:spring-jdbc'
    implementation 'org.flywaydb:flyway-core'
    implementation 'com.zaxxer:HikariCP:3.4.1'

    runtimeOnly 'org.postgresql:postgresql'

    testImplementation "junit:junit:4.12"
}

// Docker
task buildImage(type: DockerBuildImage, dependsOn: build) {
    buildArgs = ['JAR_FILE': "${bootJar.getArchiveFileName().get()}"]
    dockerFile = file("${projectDir}/Dockerfile")
    inputDir = file("${projectDir}")
    tags = ["gregnetifi/${projectDir.name}", "gregnetifi/${projectDir.name}:${version}"]
}

// Spring Boot
task bootRunLocal {
    bootRun.configure {
        systemProperty 'spring.profiles.active', 'local'
    }
}
bootRunLocal.finalizedBy bootRun

// Database
flyway {
    url = 'jdbc:postgresql://localhost:5432/postgres'
    user = 'postgres'
}